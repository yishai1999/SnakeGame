// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/09/Square/Square.jack

/**
 * The Square class implements a graphic square. A graphic square 
 * has a location on the screen and a size. It also has methods 
 * for drawing, erasing, moving on the screen, and changing its size.
 */
class Square {

    // Location on the screen
    field int x, y;

    // The size of the square
    field int size;

    /** Constructs a new square with a given location and size. */
    constructor Square new(int Ax, int Ay, int Asize) {
        let x = Ax;
        let y = Ay;
        let size = Asize;

        do draw();

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int getX() {
        return x;
    }

    method int getY() {
        return y;
    }

    method int getSize() {
        return size;
    }

    /** Draws the square on the screen. */
    method void draw() {
        var int x1,y1;
        let x1 = Utils.mod(x + size, 512);
        let y1 = Utils.mod(y + size, 256);
        do Screen.setColor(true);
        if(x + size > 512){
            if (y + size > 255) {
                do Screen.drawRectangle(x, y, 511, 255);
                do Screen.drawRectangle(0, 0, x1, y1);
            }
            else {
                do Screen.drawRectangle(x, y, 511, y1);
                do Screen.drawRectangle(0, y, x1, y1);
            }
        }
        else {
            if (y + size > 255) {
                do Screen.drawRectangle(x, y, x1, 255);
                do Screen.drawRectangle(x, 0, x1, y1);
            }
            else {
                do Screen.drawRectangle(x, y, x + size, y + size);
            }
        }
        return;
    }

    /** Erases the square from the screen. */
    method void erase() {
        var int x1,y1;
        let x1 = Utils.mod(x + size, 512);
        let y1 = Utils.mod(y + size, 256);
        do Screen.setColor(false);
        if(x + size > 512){
            if (y + size > 255) {
                do Screen.drawRectangle(x, y, 511, 255);
                do Screen.drawRectangle(0, 0, x1, y1);
            }
            else {
                do Screen.drawRectangle(x, y, 511, y1);
                do Screen.drawRectangle(0, y, x1, y1);
            }
        }
        else {
            if (y + size > 255) {
                do Screen.drawRectangle(x, y, x1, 255);
                do Screen.drawRectangle(x, 0, x1, y1);
            }
            else {
                do Screen.drawRectangle(x, y, x + size, y + size);
            }
        }
        return;
    }

    /** Moves up by 2. */
    method void moveUp() {
        if (y > 1) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
            let y = y - 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + size, y + 1);
        }
        return;
    }

    /** Moves down by 2. */
    method void moveDown() {
        if ((y + size) < 254) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + size, y + 1);
            let y = y + 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
        }
        return;
    }

    /** Moves left by 2. */
    method void moveLeft() {
        if (x > 1) {
            do Screen.setColor(false);
            do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
            let x = x - 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + 1, y + size);
        }
        return;
    }

    /** Moves right by 2. */
    method void moveRight() {
        if ((x + size) < 510) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + 1, y + size);
            let x = x + 2;
            do Screen.setColor(true);
            do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
        }
        return;
    }

    /** Moves square to random area on the screen. */
    method void moveRandom() {
        do erase();
        let x = Utils.rand1(0,511-size);
        let y = Utils.rand1(0,255-size);
        do draw();
        //do Output.printInt(x);
        //do Output.printString(" and ");
        //do Output.printInt(y);
        return;
    }

    /** Moves to specific spot. */
    method void move(int x1, int y1) {
        do erase();
        let x = Utils.mod(x1,512);
        let y = Utils.mod(y1,256);
        do draw();
        return;
    }

    /** Checks if two squares overlap. */
    method boolean isTouching(Square s1) {
        var int x1, y1, size1;
        let x1 = s1.getX();
        let y1 = s1.getY();
        let size1 = s1.getSize();

        if (((x1 < x) & (x < (x1 + size1))) | ((x < x1) & (x1 < (x + size)))) {
            if (((y1 < y) & (y < (y1 + size1))) | ((y < y1) & (y1 < (y + size)))) {
                return true;
            }
        }
        return false;
    }
}
